@{
Layout = "~/Views/Shared/_Layout.cshtml";
ViewData["Title"] = "İnsan Kaynakları Departmanı";
}

<h3>İnsan Kaynakları Departmanı Organizasyon Şeması</h3>
<div id="treeDiagram" style="width: 100%; height: 600px; border: 1px solid gray;"></div>

@section Scripts {
<script src="https://cdnjs.cloudflare.com/ajax/libs/gojs/2.3.15/go.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.2/papaparse.min.js"></script>

<script>
async function loadCSVandRenderTree() {
  const response = await fetch('/data/company.csv');
  const csvText = await response.text();
  const rawData = Papa.parse(csvText, { header: true, skipEmptyLines: true }).data;

  const nodeMap = Object.fromEntries(rawData.map(n => [n.key, n]));
  const included = new Set();

  function includeAncestors(node) {
    while (node && !included.has(node.key)) {
      included.add(node.key);
      node = nodeMap[node.parent];
    }
  }

  rawData.forEach(n => n.text.includes("İnsan Kaynakları") && includeAncestors(n));
  const filtered = rawData.filter(n => included.has(n.key));

  const $ = go.GraphObject.make;
  const diagram = $(go.Diagram, "treeDiagram", {
    layout: $(go.TreeLayout, {
      angle: 90,
      alignment: go.TreeLayout.AlignmentCenterChildren,
      layerSpacing: 20,
      nodeSpacing: 15
    }),
    initialAutoScale: go.Diagram.Uniform
  });

  diagram.nodeTemplate = $(go.Node, "Auto",
    $(go.Shape, "RoundedRectangle", { fill: "lightblue", width: 60, height: 180 }),
    $(go.TextBlock, {
      margin: 10,
      font: "bold 12px sans-serif",
      stroke: "black",
      wrap: go.TextBlock.WrapFit,
      width: 160,
      angle: 270,
      textAlign: "center"
    }, new go.Binding("text", "text"))
  );

  diagram.model = new go.TreeModel(filtered);
}

window.addEventListener("DOMContentLoaded", loadCSVandRenderTree);
</script>
}